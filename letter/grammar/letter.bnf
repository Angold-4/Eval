// --------------------------
// Lexical grammar

%lex

%%


\/\/.*            /* skip comments */
\/\*(.|\s)*\*\/   /* skip comments */

\s+        /* skip whitespace */


// ---------------------------
// Keywords

\bdef\b		  return 'DEF'
\breturn\b        return 'RETURN'
\bif\b		  return 'IF'
\belse\b	  return 'ELSE'

\d+        return 'NUMBER'
\w+        return 'IDENTIFIER'

[+\-]      return 'ADDICTIVE_OPERATOR'

[*/]       return 'MULTIPLICATIVE_OPERATOR'

/lex


// --------------------------
// Module include

%{

function BinaryExpression(left, op, right) {
    return {
	type: "BinaryExpression",
	op,
	left,
	right,
    };
}

%}

// --------------------------
// Syntatic grammar

%%

Program
    : StatementList
	{
	    $$ = {
		type: 'Program',
		body: $1,
	    }
	}
    ;

// StatementList Statement
// StatementList Statement Statement
// StatementList Statement Statement Statement
// Statement Statement Statement Statement


StatementList
    : Statement
	{ $$ = [$1] }
    | StatementList Statement
	{ $1.push($2); $$ = $1 }
    ;


Statement
    : ExpressionStatement
    | EmptyStatement
    | BlockStatement
    | FunctionDeclaration
    | ReturnStatement
    | IfStatement
    ;


IfStatement
    : IF '(' Expression ')' Statement
    | IF '(' Expression ')' Statement ELSE Statement
    ;


ReturnStatement
    : RETURN OptExpression ';'
	{
	    $$ = {
		type: 'ReturnStatement',
		argument: $2,
	    }
	}
    ;


OptExpression
    : Expression
    | /* empty */
	{ $$ = null }
    ;


FunctionDeclaration
    : DEF Identifier '(' OptFormalParameterList ')' BlockStatement
	{
	    $$ = {
		type: 'FunctionDeclaration',
		name: $2,
		params: $4,
		body: $6,
	    }
	}
    ;


Identifier
    : IDENTIFIER
	{
	    $$ = {
		type: 'Identifier',
		value: $1,
	    }
	}
    ;


OptFormalParameterList
    : FormalParameterList
    | /* empty */
	{ $$ = [] }
    ;


FormalParameterList
    : Identifier
	{ $$ = [$1] }
    | FormalParameterList ',' Identifier
	{ $1.push($3); $$ = $1 }
    ;

ExpressionStatement
    : Expression ';'
	{
	    $$ = {
		type: "ExpressionStatement",
		expression: $1,
	    }
	}
    ;

EmptyStatement
    : ';'
	{
	    $$ = {
		type: 'EmptyStatement',
	    }
	}
    ;

BlockStatement
    : '{' OptStatementList '}'
	{
	    $$ = {
		type: 'BlockStatement',
		statements: $2,
	    }
	}
    ;

OptStatementList
    : StatementList
    | /* empty */
	{ $$ = [] }
    ;

Expression
    : AdditiveExpression
    ;

AdditiveExpression
    : AdditiveExpression ADDICTIVE_OPERATOR MultiplicativeExpression
	{ $$  = BinaryExpression($1, $2, $3) }
    | MultiplicativeExpression
    ;

MultiplicativeExpression
    : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
	{ $$  = BinaryExpression($1, $2, $3) }
    | PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | Identifier
    | ParenthesizedExpression
    ;

Literal
    : NumericLiteral
    ;

NumericLiteral
    : NUMBER 
	{ 
	    $$ = {
		type: "NumericLiteral",
		value: Number($1),
	    }
	}
    ;

ParenthesizedExpression
    : '(' Expression ')' { $$ = $2 }
    ;
